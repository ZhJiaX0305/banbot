// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: train.proto

package biz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeaFeederClient is the client API for FeaFeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaFeederClient interface {
	SubFeatures(ctx context.Context, in *SubReq, opts ...grpc.CallOption) (FeaFeeder_SubFeaturesClient, error)
}

type feaFeederClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaFeederClient(cc grpc.ClientConnInterface) FeaFeederClient {
	return &feaFeederClient{cc}
}

func (c *feaFeederClient) SubFeatures(ctx context.Context, in *SubReq, opts ...grpc.CallOption) (FeaFeeder_SubFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeaFeeder_ServiceDesc.Streams[0], "/FeaFeeder/SubFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &feaFeederSubFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeaFeeder_SubFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type feaFeederSubFeaturesClient struct {
	grpc.ClientStream
}

func (x *feaFeederSubFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeaFeederServer is the server API for FeaFeeder service.
// All implementations must embed UnimplementedFeaFeederServer
// for forward compatibility
type FeaFeederServer interface {
	SubFeatures(*SubReq, FeaFeeder_SubFeaturesServer) error
	mustEmbedUnimplementedFeaFeederServer()
}

// UnimplementedFeaFeederServer must be embedded to have forward compatible implementations.
type UnimplementedFeaFeederServer struct {
}

func (UnimplementedFeaFeederServer) SubFeatures(*SubReq, FeaFeeder_SubFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubFeatures not implemented")
}
func (UnimplementedFeaFeederServer) mustEmbedUnimplementedFeaFeederServer() {}

// UnsafeFeaFeederServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaFeederServer will
// result in compilation errors.
type UnsafeFeaFeederServer interface {
	mustEmbedUnimplementedFeaFeederServer()
}

func RegisterFeaFeederServer(s grpc.ServiceRegistrar, srv FeaFeederServer) {
	s.RegisterService(&FeaFeeder_ServiceDesc, srv)
}

func _FeaFeeder_SubFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeaFeederServer).SubFeatures(m, &feaFeederSubFeaturesServer{stream})
}

type FeaFeeder_SubFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type feaFeederSubFeaturesServer struct {
	grpc.ServerStream
}

func (x *feaFeederSubFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

// FeaFeeder_ServiceDesc is the grpc.ServiceDesc for FeaFeeder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeaFeeder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeaFeeder",
	HandlerType: (*FeaFeederServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubFeatures",
			Handler:       _FeaFeeder_SubFeatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "train.proto",
}
