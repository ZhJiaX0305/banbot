// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ui_query.sql

package ormu

import (
	"context"
)

const addTask = `-- name: AddTask :one
insert into task
("mode", "args", "config", "create_at", "start_at", "stop_at", "info")
values (?, ?, ?, ?, ?, ?, ?)
    returning id, mode, args, config, path, create_at, start_at, stop_at, info
`

type AddTaskParams struct {
	Mode     string `json:"mode"`
	Args     string `json:"args"`
	Config   string `json:"config"`
	CreateAt int64  `json:"create_at"`
	StartAt  int64  `json:"start_at"`
	StopAt   int64  `json:"stop_at"`
	Info     string `json:"info"`
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) (*Task, error) {
	row := q.db.QueryRowContext(ctx, addTask,
		arg.Mode,
		arg.Args,
		arg.Config,
		arg.CreateAt,
		arg.StartAt,
		arg.StopAt,
		arg.Info,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Mode,
		&i.Args,
		&i.Config,
		&i.Path,
		&i.CreateAt,
		&i.StartAt,
		&i.StopAt,
		&i.Info,
	)
	return &i, err
}

const getTask = `-- name: GetTask :one
select id, mode, args, config, path, create_at, start_at, stop_at, info from task
where id = ?
`

func (q *Queries) GetTask(ctx context.Context, id int64) (*Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Mode,
		&i.Args,
		&i.Config,
		&i.Path,
		&i.CreateAt,
		&i.StartAt,
		&i.StopAt,
		&i.Info,
	)
	return &i, err
}

const listTasks = `-- name: ListTasks :many
select id, mode, args, config, path, create_at, start_at, stop_at, info from task
where mode = ? and id < ?
order by id desc
limit ?
`

type ListTasksParams struct {
	Mode  string `json:"mode"`
	ID    int64  `json:"id"`
	Limit int64  `json:"limit"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]*Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.Mode, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Mode,
			&i.Args,
			&i.Config,
			&i.Path,
			&i.CreateAt,
			&i.StartAt,
			&i.StopAt,
			&i.Info,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
